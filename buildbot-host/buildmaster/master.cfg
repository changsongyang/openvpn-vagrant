# -*- python -*-
# ex: set filetype=python:

from twisted.internet import defer
from buildbot.plugins import *
from buildbot.plugins import secrets, util
import configparser
import json
import multiprocessing
import os
import random
import time

# Load configuration from configuration files
worker_config = configparser.ConfigParser()
worker_config.read("worker.ini")
master_config = configparser.ConfigParser()
master_config.read("master.ini")

c = BuildmasterConfig = {}

persistent_dir = os.path.expanduser(os.path.join(basedir, "persistent"))
repo_url = "https://github.com/OpenVPN/openvpn.git"
branch = "master"
notify_email = master_config.get("master", "notify_email")
master_fqdn = master_config.get("master", "master_fqdn")
docker_host = master_config.get("docker", "host", raw=True)
docker_network = master_config.get("docker", "network")

# Each section in worker.ini represents one buildbot worker. The "DEFAULT"
# section gives the default settings and gets filtered out automatically, i.e.
# does not become a worker.
worker_names = worker_config.sections()
builder_names = []

build_and_test_config_opt_combos = [
    "",
    "--with-crypto-library=mbedtls --enable-crypto"
]

config_opt_combos = [
    "--disable-lz4",
    "--disable-lzo",
    "--disable-lzo --disable-lz4 --enable-comp-stub",
    "--disable-lzo --disable-management",
    "--disable-management",
    "--disable-server --enable-small",
    "--enable-small"
]

c['secretsProviders'] = [secrets.SecretInAFile(dirname=os.path.join(persistent_dir, "secrets"))]

c['workers'] = []

# Create normal and latent workers
for worker_name in worker_names:

    if worker_config.get(worker_name, "type") ==  "latent_docker":
      image = worker_config.get(worker_name, "image")
      c['workers'].append(worker.DockerLatentWorker(worker_name,
                                                    "vagrant",
                                                    max_builds=1,
                                                    notify_on_missing=notify_email,
                                                    docker_host=docker_host,
                                                    image=image,
                                                    masterFQDN="buildmaster",
                                                    volumes=[f'buildbot-worker-{worker_name}:/home/buildbot'],
                                                    hostconfig = { "network_mode": docker_network,
                                                                   "sysctls": { "net.ipv6.conf.all.disable_ipv6": 0 },
                                                                   "cap_add": ["NET_ADMIN"] }))
    else:
        c['workers'].append(worker.Worker(worker_name,
                            util.Secret("worker-password"),
                            max_builds=1,
                            notify_on_missing=notify_email))

c['protocols'] = {'pb': {'port': 9989}}

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        repo_url,
        workdir='gitpoller-workdir', branch=branch,
        pollInterval=10))

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch=branch),
                            treeStableTimer=None,
                            builderNames=builder_names))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=builder_names))

c['builders'] = []

# Allow only two concurrent builds across all latent docker workers
cpus = multiprocessing.cpu_count()
docker_build_lock = util.MasterLock("docker", maxCount=cpus)

# Only allow one docker worker to run t_client tests at the same time. This is
# convenience feature to reduce the number of keys required for t_client tests.
docker_tclient_lock = util.MasterLock("docker", maxCount=1)

factories = {}

def getBuilderNameSuffix(combo):
    """Generate builder name suffix from configure options"""
    if not combo:
      return "-default"
    else:
      return combo.replace(" ", "")

def getFactoryName(combo):
    return f'factory{getBuilderNameSuffix(combo)}'

def addCommonWindowsStepsToBuildFactory(factory, combo):
    factory.workdir = "openvpn"
    factory.addStep(steps.Git(repourl=repo_url, mode="incremental", name="clone", description="cloning", descriptionDone="cloning"))
    # Convert the rst man page to html for the MSI package
    factory.addStep(steps.ShellCommand(command=["rst2html.py", "doc\\openvpn.8.rst", "doc\\openvpn.8.html"], name="rst2html", description="converting man-page", descriptionDone="converting"))
    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/msbuild-x64.bat", workerdest="msbuild-x64.bat", name="download x64 build script", description="downloading", descriptionDone="downloading"))
    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/msbuild-x64_x86.bat", workerdest="msbuild-x64_x86.bat", name="download x86 build script", description="downloading", descriptionDone="downloading"))
    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/msbuild-x64_arm64.bat", workerdest="msbuild-x64_arm64.bat", name="download arm64 build script", description="downloading", descriptionDone="downloading"))
    factory.addStep(steps.ShellCommand(command=["Powershell.exe", "-Executionpolicy", "RemoteSigned", "-File", "..\\openvpn-gui\\build-msvc.ps1"], name="build openvpn-gui", description="building", descriptionDone="building"))
    factory.addStep(steps.ShellCommand(command=["call", "msbuild-x64.bat"], name="build x64", description="building", descriptionDone="building"))
    factory.addStep(steps.ShellCommand(command=["call", "msbuild-x64_x86.bat"], name="build x86", description="building", descriptionDone="building"))
    factory.addStep(steps.ShellCommand(command=["call", "msbuild-x64_arm64.bat"], name="build arm64", description="building", descriptionDone="building"))
    factory.addStep(steps.ShellCommand(command=["cscript.exe", "build.wsf", "msi"], workdir="openvpn-build\\windows-msi", name="package", description="packaging", descriptionDone="packaging"))
    return factory

def addCommonUnixStepsToBuildFactory(factory, combo):
    factory.addStep(steps.Git(repourl=repo_url, mode='incremental'))
    factory.addStep(steps.ShellCommand(command=["autoreconf", "-v", "-i"]))
    configure = ["./configure"] + combo.split(" ")
    factory.addStep(steps.ShellCommand(command=configure))
    factory.addStep(steps.ShellCommand(command=["make", "clean"]))
    factory.addStep(steps.ShellCommand(command=["make"]))
    return factory

def addTClientStepsToBuildFactory(factory, combo):
    factory.addStep(steps.ShellCommand(command=["cp", "-f", "/home/buildbot/t_client.rc", "."]))
    factory.addStep(steps.ShellCommand(command=["touch", "t_client_ips.rc"]))
    factory.addStep(steps.ShellCommand(command=["cp", "-f", "/home/buildbot/t_client_ips.rc", "."]))
    factory.addStep(steps.ShellCommand(command=["cp", "-f", "t_client_ips.rc", "/home/buildbot/t_client_ips.rc"]))
    factory.addStep(steps.FileDownload(mastersrc="/var/lib/buildbot/masters/default/ensure-tun-is-present.sh", workerdest="ensure-tun-is-present.sh", mode=0o755))
    factory.addStep(steps.ShellCommand(command=["./ensure-tun-is-present.sh"]))
    factory.addStep(steps.ShellCommand(command=["make", "check"]))
    return factory

# Basic compile tests on Unix-style operating systems
for combo in config_opt_combos:
    factory = util.BuildFactory()
    factory = addCommonUnixStepsToBuildFactory(factory, combo)
    factory_name = getFactoryName(combo)
    factories.update({factory_name: (factory, 'unix')})
    del factory

# Connectivity tests on Unix-style operating systems
if master_config.get("master", "run_tclient_tests") == "True":
    for combo in build_and_test_config_opt_combos:
        factory = util.BuildFactory()
        factory = addCommonUnixStepsToBuildFactory(factory, combo)
        factory = addTClientStepsToBuildFactory(factory, combo)
        factory_name = getFactoryName(combo)
        factories.update({factory_name: (factory, 'unix')})
        del factory

# Windows msbuild tests
factory = util.BuildFactory()
factory = addCommonWindowsStepsToBuildFactory(factory, combo)
factory_name = "msbuild"
factories.update({factory_name: (factory, 'windows')})
del factory

for factory_name, factory in factories.items():
    for worker_name in worker_names:
      # Check if this factory is applicable for the worker's operating system
      if not factory[1] == worker_config.get(worker_name, "ostype"):
          continue

      # Concurrent docker builds utilize a shared master lock in counting mode.
      # In human-speak we only allow two concurrent Docker builders to run at
      # any given time.
      if worker_config.get(worker_name, "type") == "latent_docker":
          # Builder-level locks affect the entire build
          locks = [docker_build_lock.access('counting')]
      else:
          locks = None

      builder_name = f'{worker_name}-{factory_name}'
      c['builders'].append(
          util.BuilderConfig(name=builder_name,
            workernames=[worker_name],
            factory=factory[0],
            locks=locks))
      builder_names.append(builder_name)

c['services'] = []
c['title'] = "OpenVPN community buildbot"
c['titleURL'] = "https://buildmaster.vagrant.local"
c['buildbotURL'] = "http://192.168.48.114:8010/"
c['www'] = {
    'port': 8010,
    'plugins': { 'waterfall_view': True, }
}

c['db'] = {
    'db_url' : f'sqlite:////{persistent_dir}/libstate.sqlite',
}
